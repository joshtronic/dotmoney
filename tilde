#!/usr/bin/env bash

# tilde install joshtronic/dotfiles-test
#     Pulls down dotfiles and installs them

# tilde merge joshtronic/dotfiles-test [components]
#     Merges from dotfiles to local, pushes back to repository
#     Components - packages (all packages), apt, brew, gem, npm

# tilde pull
#     Pulls remote changes for the installed dotfiles and reruns installation

# tilde push
#     Commits and pushes local changes for the installed dotfiles

tilde=~/.tilde

# Checks that our directory exists, if not creates it
if [ ! -d $tilde ]
then
	mkdir $tilde
fi

# Checks that a repository is present on install or merge
if [ $1 == 'install' -o $1 == 'merge' ]
then
	if [ -z $2 ]
	then
		echo 'Error: Missing repository.'
		exit 1
	fi
fi

install_file()
{
	# Checks if the source file exists
	if [ -e $1 ]
	then
		link_file='y'

		# Checks if the destination file exists
		if [ -e $2 ]
		then
			echo -n "$2 already exists, replace? y or [n]: "
			read -n 1 link_file
			echo

			# Prompts to remove it
			if [ "$link_file" == 'y' ]
			then
				if [[ $3 == 'launchd' ]]
				then
					echo "Unloading $2..."
					launchctl unload -w $2
				fi

				rm -rf $2
			fi
		fi

		if [ "$link_file" == 'y' ]
		then
			ln -s $1 $2
		fi

		if [[ $3 == 'launchd' ]]
		then
			echo "Loading $2..."
			launchctl load -w $2
		fi
	fi
}

install_dotfiles()
{
	# Checks if we have a packages.yml
	dotfiles=`cat $tilde/installed`
	packages=$dotfiles/packages.yml

	if [ -e $packages ]
	then
		cat $packages | while read package
		do
			if [[ $package =~ :$ ]]
			then
				manager=`echo $package | tr -d ':'`

				if [ $manager == 'brew' ]
				then
					if [ `uname` == 'Darwin' ] && ! hash brew 2>/dev/null
					then
						echo 'Installing `brew`...'
						ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
					fi
				fi

				if hash $manager 2>/dev/null
				then
					manager_exists=true
					echo "Manager \`$manager\` is found!"
				else
					manager_exists=false
					echo "Manager \`$manager\` is missing, skipping packages"
				fi

				echo "Installing \`$manager\` packages..."
			else
				package=`echo $package | sed -e 's/-//'`

				if [[ $manager_exists == true && $package != '' ]]
				then
					case $manager in
						apt*)
							sudo aptitude install $package
							;;

						brew)
							if [[ $package == */* ]]
							then
								brew tap $package
							else
								brew install $package
							fi
							;;

						gem)
							sudo gem install $package
							;;

						npm)
							npm install -g $package
							;;

						*)
							echo "Error: Unsupported package manager - $manager"
							exit 1
							;;
					esac
				fi
			fi
		done
	fi

	# Sets up symlinks
	install_file $dotfiles/bash/bashrc   ~/.bashrc
	install_file $dotfiles/git/gitconfig ~/.gitconfig
	install_file $dotfiles/hg/hgrc       ~/.hgrc
	install_file $dotfiles/mutt/         ~/.mutt
	install_file $dotfiles/vim/          ~/.vim
	install_file $dotfiles/zsh/zshrc     ~/.zshrc

	# TODO .ssh/config
	# TODO .subversion/config

	# TODO Check for vundle and install it
	# TODO Set up zsh / omz theme

	# Sets up symlinks for launchd
	launchd_files=$dotfiles/launchd

	if [[ `uname` == 'Darwin' && -e $launchd_files ]]
	then
		launchagents=~/Library/LaunchAgents

		if [ -d "$launchagents" ]
		then
			mkdir -p $launchagents
		fi

		for f in $(ls -d $launchd_files/*)
		do
			launchagent=~/Library/LaunchAgents/`basename $f`
			install_file $f $launchagent 'launchd'
		done
	fi

	# Creates the undodir if configured in vimrc
	undodir=`grep --no-filename 'undodir' ~/.vim/vimrc -R`

	# TODO Move this to inside of vimrc
	if [[ $undodir != '' ]]
	then
		undodir=`echo $undodir | awk -F'=' '{print $2}'`

		# TODO Checks if directory exists
		mkdir -p $undodir
	fi
}

# Wondering if we really want be doing all of this, just a straight install is
# most likely all that most people are going to use.
case $1 in
	install)
		clone=$tilde/$2

		if [ -d $clone ]
		then
			echo "Updating $2..."
			cd $clone
			git pull origin master
			cd - > /dev/null
		else
			echo "Cloning $2..."
			git clone git@github.com:$2.git $CLONE
		fi

		echo $clone > $tilde/installed

		install_dotfiles
		;;

	merge)
		# Checks that we're not trying to merge our installed repo
		;;

	pull)
		echo "Updating $2..."
		cd $clone
		git pull origin master
		cd -

		install_dotfiles
		;;

	push)
		echo "Pushing $2..."
		cd $clone
		git push origin master
		cd -
		;;

	*)
		echo 'Usage: tilde [action] [repo] [options]'
		echo
		echo 'Examples:'
		echo '    install [repo] - clones the repo and runs an installation'
		echo '    merge [repo] [componet[/file]] - merges a repo with the installed repo'
		echo '    pull - pulls changes for the installed repo and re-runs installation'
		echo '    push - pushes changes for the installed repo'
		;;
esac
